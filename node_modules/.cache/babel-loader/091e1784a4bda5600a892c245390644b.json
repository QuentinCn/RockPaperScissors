{"ast":null,"code":"var _jsxFileName = \"/home/Quentin/delivery/WebstormProjects/timer/src/BotBot.js\";\nimport React, { Component } from \"react\";\nimport { Button, getWinner } from \"./PlayerBot.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BotBot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetGame = () => {\n      this.setState({\n        J1Score: 0,\n        J1Choice: \"\",\n        J2Score: 0,\n        J2Choice: \"\"\n      });\n    };\n\n    this.showInGame = () => {\n      if (this.state.J1Choice !== \"\" && this.state.J2Choice !== \"\") return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.J1Score + \"/\" + this.state.J2Score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), this.state.restartButton, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Bot1 choose : \" + this.state.J1Choice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Bot2 choose : \" + this.state.J2Choice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.J1Score + \"/\" + this.state.J2Score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), this.state.restartButton]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this);\n    };\n\n    this.showEndGame = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.J1Score + \"/\" + this.state.J2Score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.J1Score === 3 ? \"Bot1 WON !!!\" : \"Bot2 WON !!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"Restart\",\n          children: this.state.restartButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      J1Score: 0,\n      J1Choice: \"\",\n      J2Score: 0,\n      J2Choice: \"\",\n      restartButton: /*#__PURE__*/_jsxDEV(Button, {\n        buttonContent: \"Restart\",\n        onClick: this.resetGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 28\n      }, this),\n      seconds: 0,\n      count: 4\n    };\n  }\n\n  getBotsChoice() {\n    const choices = [\"Rock\", \"Paper\", \"Scissors\"];\n    const rand1 = (Math.random() * 2).toFixed(0);\n    const rand2 = (Math.random() * 2).toFixed(0);\n    this.setState({\n      J1Choice: choices[rand1],\n      J2Choice: choices[rand2]\n    });\n    if (getWinner(choices[rand1], choices[rand2]) === 1) this.setState({\n      J1Score: this.state.J1Score + 1\n    });else if (getWinner(choices[rand1], choices[rand2]) === -1) this.setState({\n      J2Score: this.state.J2Score + 1\n    });\n  }\n\n  render() {\n    if (this.state.J1Score < 3 && this.state.J2Score < 3) return this.showInGame();else return this.showEndGame();\n  }\n\n  componentDidMount() {\n    this.myInterval = setInterval(() => {\n      if (this.state.count <= 0) this.setState({\n        count: 4\n      });\n      this.setState(prevState => ({\n        count: prevState.count - 1\n      }));\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n  }\n\n}\n\nexport default BotBot;","map":{"version":3,"sources":["/home/Quentin/delivery/WebstormProjects/timer/src/BotBot.js"],"names":["React","Component","Button","getWinner","BotBot","constructor","props","resetGame","setState","J1Score","J1Choice","J2Score","J2Choice","showInGame","state","restartButton","showEndGame","seconds","count","getBotsChoice","choices","rand1","Math","random","toFixed","rand2","render","componentDidMount","myInterval","setInterval","prevState","componentWillUnmount","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, getWinner } from \"./PlayerBot.js\"\n\nclass BotBot extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            J1Score: 0,\n            J1Choice: \"\",\n            J2Score: 0,\n            J2Choice: \"\",\n            restartButton: <Button buttonContent=\"Restart\" onClick={this.resetGame}/>,\n            seconds: 0,\n            count: 4,\n        }\n    }\n\n    resetGame = () => {\n        this.setState({\n            J1Score: 0,\n            J1Choice: \"\",\n            J2Score: 0,\n            J2Choice: \"\",\n        })\n    }\n\n    getBotsChoice() {\n        const choices = [\"Rock\", \"Paper\", \"Scissors\"];\n        const rand1 = (Math.random() * 2).toFixed(0);\n        const rand2 = (Math.random() * 2).toFixed(0);\n\n        this.setState({\n            J1Choice: choices[rand1],\n            J2Choice: choices[rand2],\n        })\n        if (getWinner(choices[rand1], choices[rand2]) === 1)\n            this.setState({\n                J1Score: this.state.J1Score + 1\n            })\n        else if (getWinner(choices[rand1], choices[rand2]) === -1)\n            this.setState({\n                J2Score: this.state.J2Score + 1\n            })\n    }\n\n    showInGame = () => {\n        if (this.state.J1Choice !== \"\" && this.state.J2Choice !== \"\")\n            return (\n                <div>\n                    <p>{this.state.J1Score + \"/\" + this.state.J2Score}</p>\n                    {this.state.restartButton}\n                    <p>{\"Bot1 choose : \" + this.state.J1Choice}</p>\n                    <p>{\"Bot2 choose : \" + this.state.J2Choice}</p>\n                </div>\n            );\n        else\n            return (\n                <div>\n                    <p>{this.state.J1Score + \"/\" + this.state.J2Score}</p>\n                    {this.state.restartButton}\n                </div>\n            );\n    }\n\n    showEndGame = () => {\n        return (\n            <div>\n                <p>{this.state.J1Score + \"/\" + this.state.J2Score}</p>\n                <p>{this.state.J1Score === 3 ? \"Bot1 WON !!!\" : \"Bot2 WON !!!\"}</p>\n                <div id=\"Restart\">\n                    {this.state.restartButton}\n                </div>\n            </div>\n        );\n    }\n\n    render () {\n        if (this.state.J1Score < 3 && this.state.J2Score < 3)\n            return (\n                this.showInGame()\n            );\n        else\n            return (\n                this.showEndGame()\n            );\n    }\n\n    componentDidMount () {\n        this.myInterval = setInterval(() => {\n            if (this.state.count <= 0)\n                this.setState({\n                    count: 4\n                })\n            this.setState(prevState => ({\n                count: prevState.count - 1\n            }))\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n}\n\nexport default BotBot"]},"metadata":{},"sourceType":"module"}